# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import movie_pb2 as movie__pb2


class MovieServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMovies = channel.unary_unary(
                '/MovieService/GetMovies',
                request_serializer=movie__pb2.GetMoviesRequest.SerializeToString,
                response_deserializer=movie__pb2.MovieList.FromString,
                )
        self.GetMovieByActor = channel.unary_unary(
                '/MovieService/GetMovieByActor',
                request_serializer=movie__pb2.GetMoviesRequest.SerializeToString,
                response_deserializer=movie__pb2.MovieList.FromString,
                )
        self.GetMovieByGenre = channel.unary_unary(
                '/MovieService/GetMovieByGenre',
                request_serializer=movie__pb2.GetMoviesRequest.SerializeToString,
                response_deserializer=movie__pb2.MovieList.FromString,
                )
        self.DeleteMovie = channel.unary_unary(
                '/MovieService/DeleteMovie',
                request_serializer=movie__pb2.DeleteMovieRequest.SerializeToString,
                response_deserializer=movie__pb2.Response.FromString,
                )
        self.UpdateMovie = channel.unary_unary(
                '/MovieService/UpdateMovie',
                request_serializer=movie__pb2.MoviesData.SerializeToString,
                response_deserializer=movie__pb2.Response.FromString,
                )
        self.AddMovie = channel.unary_unary(
                '/MovieService/AddMovie',
                request_serializer=movie__pb2.MoviesData.SerializeToString,
                response_deserializer=movie__pb2.Response.FromString,
                )


class MovieServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMovieByActor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMovieByGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovies,
                    request_deserializer=movie__pb2.GetMoviesRequest.FromString,
                    response_serializer=movie__pb2.MovieList.SerializeToString,
            ),
            'GetMovieByActor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovieByActor,
                    request_deserializer=movie__pb2.GetMoviesRequest.FromString,
                    response_serializer=movie__pb2.MovieList.SerializeToString,
            ),
            'GetMovieByGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovieByGenre,
                    request_deserializer=movie__pb2.GetMoviesRequest.FromString,
                    response_serializer=movie__pb2.MovieList.SerializeToString,
            ),
            'DeleteMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMovie,
                    request_deserializer=movie__pb2.DeleteMovieRequest.FromString,
                    response_serializer=movie__pb2.Response.SerializeToString,
            ),
            'UpdateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMovie,
                    request_deserializer=movie__pb2.MoviesData.FromString,
                    response_serializer=movie__pb2.Response.SerializeToString,
            ),
            'AddMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMovie,
                    request_deserializer=movie__pb2.MoviesData.FromString,
                    response_serializer=movie__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MovieService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieService/GetMovies',
            movie__pb2.GetMoviesRequest.SerializeToString,
            movie__pb2.MovieList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMovieByActor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieService/GetMovieByActor',
            movie__pb2.GetMoviesRequest.SerializeToString,
            movie__pb2.MovieList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMovieByGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieService/GetMovieByGenre',
            movie__pb2.GetMoviesRequest.SerializeToString,
            movie__pb2.MovieList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieService/DeleteMovie',
            movie__pb2.DeleteMovieRequest.SerializeToString,
            movie__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieService/UpdateMovie',
            movie__pb2.MoviesData.SerializeToString,
            movie__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieService/AddMovie',
            movie__pb2.MoviesData.SerializeToString,
            movie__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
